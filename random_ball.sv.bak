module  random_ball ( input         Clk,                // 50 MHz clock
                             Reset,              // Active-high reset signal
                             frame_clk, // The clock indicating a new frame (~60Hz)
					input is_ball,
					input [8:0] randomx,
					input [7:0] randomy,
                    input [9:0]   DrawX ,
                    input [9:0]   DrawY ,					// Current pixel coordinates
					//input    isCollision[0:15],
						output logic is_collision,
                    output logic  is_rball[0:15]             // Whether current pixel belongs to ball or background
              );
    

    parameter [9:0] Ball_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Ball_X_Max=639;     // Rightmost point on the X axis
    parameter [9:0] Ball_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Ball_Y_Max=479;     // Bottommost point on the Y axis

    parameter [9:0] Ball_Size=10;        // Ball size
    
    logic [9:0] Ball_X_Pos[0:15];
    logic [9:0] Ball_Y_Pos[0:15];
	 logic [9:0] Ball_X_Pos_in[0:15];
    logic [9:0] Ball_Y_Pos_in[0:15];
    int DistX[16];
	 int DistY[16];
    
	 //DistX[0],DistX[1],DistX[2],DistX[3],DistX[4],DistX[5],DistX[6],DistX[7],DistX[8],DistX[9],DistX[10],DistX[11],DistX[12],DistX[13],DistX[14],DistX[15];
	 //DistY[0],DistY[1],DistY[2],DistY[3],DistY[4],DistY[5],DistY[6],DistY[7],DistY[8],DistY[9],DistY[10],DistY[11],DistY[12],DistY[13],DistY[14],DistY[15];
    
    int Size;
    assign Size = Ball_Size;
	 
//	 for(int j = 0 ; j < 16 ; j++);
//	 begin
//	 assign DistX[i] = DrawX - Ball_X_Pos[i];
//	 assign DistY[i] = DrawY - Ball_Y_Pos[i];
//	 end
    assign DistX[0] =  DrawX -  Ball_X_Pos[0];
    assign DistX[1] =  DrawX -  Ball_X_Pos[1];
    assign DistX[2] =  DrawX -  Ball_X_Pos[2];
    assign DistX[3] =  DrawX -  Ball_X_Pos[3];
    assign DistX[4] =  DrawX -  Ball_X_Pos[4];
    assign DistX[5] =  DrawX -  Ball_X_Pos[5];
    assign DistX[6] =  DrawX -  Ball_X_Pos[6];
    assign DistX[7] =  DrawX -  Ball_X_Pos[7];
    assign DistX[8] =  DrawX -  Ball_X_Pos[8];
    assign DistX[9] =  DrawX -  Ball_X_Pos[9];
    assign DistX[10] = DrawX - Ball_X_Pos[10];
    assign DistX[11] = DrawX - Ball_X_Pos[11];
    assign DistX[12] = DrawX - Ball_X_Pos[12];
    assign DistX[13] = DrawX - Ball_X_Pos[13];
    assign DistX[14] = DrawX - Ball_X_Pos[14];
    assign DistX[15] = DrawX - Ball_X_Pos[15];
    assign DistY[0] =  DrawY -  Ball_Y_Pos[0];
    assign DistY[1] =  DrawY -  Ball_Y_Pos[1];
    assign DistY[2] =  DrawY -  Ball_Y_Pos[2];
    assign DistY[3] =  DrawY -  Ball_Y_Pos[3];
    assign DistY[4] =  DrawY -  Ball_Y_Pos[4];
    assign DistY[5] =  DrawY -  Ball_Y_Pos[5];
    assign DistY[6] =  DrawY -  Ball_Y_Pos[6];
    assign DistY[7] =  DrawY -  Ball_Y_Pos[7];
    assign DistY[8] =  DrawY -  Ball_Y_Pos[8];
    assign DistY[9] =  DrawY -  Ball_Y_Pos[9];
    assign DistY[10] = DrawY - Ball_Y_Pos[10];
    assign DistY[11] = DrawY - Ball_Y_Pos[11];
    assign DistY[12] = DrawY - Ball_Y_Pos[12];
    assign DistY[13] = DrawY - Ball_Y_Pos[13];
    assign DistY[14] = DrawY - Ball_Y_Pos[14];
    assign DistY[15] = DrawY - Ball_Y_Pos[15];
 


    logic frame_clk_delayed;
    logic frame_clk_rising_edge;
    
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
    end
    assign frame_clk_rising_edge = (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    // Update ball position and motion
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            Ball_X_Pos[0] <=1 ;  
            Ball_Y_Pos[0] <=3 ;
            Ball_X_Pos[1] <=12 ;  
            Ball_Y_Pos[1] <=7 ;
            Ball_X_Pos[2] <=17 ;  
            Ball_Y_Pos[2] <=58 ;
            Ball_X_Pos[3] <=45 ;  
            Ball_Y_Pos[3] <=69 ;
            Ball_X_Pos[4] <=66 ;  
            Ball_Y_Pos[4] <=88 ;
            Ball_X_Pos[5] <=77 ;  
            Ball_Y_Pos[5] <=92 ;
            Ball_X_Pos[6] <=89 ;  
            Ball_Y_Pos[6] <=120 ;
            Ball_X_Pos[7] <=100 ;  
            Ball_Y_Pos[7] <=130 ;
            Ball_X_Pos[8] <=200 ;  
            Ball_Y_Pos[8] <=66 ;
            Ball_X_Pos[9] <=300 ;  
            Ball_Y_Pos[9] <=99 ;
            Ball_X_Pos[10] <=400 ;  
            Ball_Y_Pos[10] <=89 ;
            Ball_X_Pos[11] <=455 ;  
            Ball_Y_Pos[11] <=300 ;
            Ball_X_Pos[12] <=543 ;  
            Ball_Y_Pos[12] <=400 ;
            Ball_X_Pos[13] <=602 ;  
            Ball_Y_Pos[13] <=38 ;
            Ball_X_Pos[14] <=625 ;  
            Ball_Y_Pos[14] <=5 ;
            Ball_X_Pos[15] <=644 ;  
            Ball_Y_Pos[15] <=79 ;
				end
        else if (frame_clk_rising_edge)       
        begin
        Ball_X_Pos[0]  = Ball_X_Pos_in[0];
        Ball_Y_Pos[0]  = Ball_Y_Pos_in[0];
        Ball_X_Pos[1]  = Ball_X_Pos_in[1];
        Ball_Y_Pos[1]  = Ball_Y_Pos_in[1];
        Ball_X_Pos[2]  = Ball_X_Pos_in[2];
        Ball_Y_Pos[2]  = Ball_Y_Pos_in[2];
        Ball_X_Pos[3]  = Ball_X_Pos_in[3];
        Ball_Y_Pos[3]  = Ball_Y_Pos_in[3];
        Ball_X_Pos[4]  = Ball_X_Pos_in[4];
        Ball_Y_Pos[4]  = Ball_Y_Pos_in[4];
        Ball_X_Pos[5]  = Ball_X_Pos_in[5];
        Ball_Y_Pos[5]  = Ball_Y_Pos_in[5];
        Ball_X_Pos[6]  = Ball_X_Pos_in[6];
        Ball_Y_Pos[6]  = Ball_Y_Pos_in[6];
        Ball_X_Pos[7]  = Ball_X_Pos_in[7];
        Ball_Y_Pos[7]  = Ball_Y_Pos_in[7];
        Ball_X_Pos[8]  = Ball_X_Pos_in[8];
        Ball_Y_Pos[8]  = Ball_Y_Pos_in[8];
        Ball_X_Pos[9]  = Ball_X_Pos_in[9];
        Ball_Y_Pos[9]  = Ball_Y_Pos_in[9];
        Ball_X_Pos[10] = Ball_X_Pos_in[10];
        Ball_Y_Pos[10] = Ball_Y_Pos_in[10];
        Ball_X_Pos[11] = Ball_X_Pos_in[11];
        Ball_Y_Pos[11] = Ball_Y_Pos_in[11];
        Ball_X_Pos[12] = Ball_X_Pos_in[12];
        Ball_Y_Pos[12] = Ball_Y_Pos_in[12];
        Ball_X_Pos[13] = Ball_X_Pos_in[13];
        Ball_Y_Pos[13] = Ball_Y_Pos_in[13];
        Ball_X_Pos[14] = Ball_X_Pos_in[14];
        Ball_Y_Pos[14] = Ball_Y_Pos_in[14];
        Ball_X_Pos[15] = Ball_X_Pos_in[15];
        Ball_Y_Pos[15] = Ball_Y_Pos_in[15];
        end
 
    end
    
    
    always_comb
    begin
	     if(is_rball[0] ==1 && is_ball == 1)// Update the ball's position with its motion
        begin
        Ball_X_Pos_in[0] = randomx;
        Ball_Y_Pos_in[0] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[1] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[1] = randomx;
        Ball_Y_Pos_in[1] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[2] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[2] = randomx;
        Ball_Y_Pos_in[2] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[3] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[3] = randomx;
        Ball_Y_Pos_in[3] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[4] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[4] = randomx;
        Ball_Y_Pos_in[4] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[5] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[5] = randomx;
        Ball_Y_Pos_in[5] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[6] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[6] = randomx;
        Ball_Y_Pos_in[6] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[7] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[7] = randomx;
        Ball_Y_Pos_in[7] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[8] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[8] = randomx;
        Ball_Y_Pos_in[8] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[9] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[9] = randomx;
        Ball_Y_Pos_in[9] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[10] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[10] = randomx;
        Ball_Y_Pos_in[10] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[11] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[11] = randomx;
        Ball_Y_Pos_in[11] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[12] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[12] = randomx;
        Ball_Y_Pos_in[12] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[13] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[13] = randomx;
        Ball_Y_Pos_in[13] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[14] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[14] = randomx;
        Ball_Y_Pos_in[14] = randomy;
		  is_collision = 1;
		  end
		  
		  else if(is_rball[15] ==1 && is_ball == 1)
        begin
        Ball_X_Pos_in[15] = randomx;
        Ball_Y_Pos_in[15] = randomy;
		  is_collision = 1;
        end
		  
        else
		  begin
        Ball_X_Pos_in[0]  = Ball_X_Pos[0];
        Ball_Y_Pos_in[0]  = Ball_Y_Pos[0];
        Ball_X_Pos_in[1]  = Ball_X_Pos[1];
        Ball_Y_Pos_in[1]  = Ball_Y_Pos[1];
        Ball_X_Pos_in[2]  = Ball_X_Pos[2];
        Ball_Y_Pos_in[2]  = Ball_Y_Pos[2];
        Ball_X_Pos_in[3]  = Ball_X_Pos[3];
        Ball_Y_Pos_in[3]  = Ball_Y_Pos[3];
        Ball_X_Pos_in[4]  = Ball_X_Pos[4];
        Ball_Y_Pos_in[4]  = Ball_Y_Pos[4];
        Ball_X_Pos_in[5]  = Ball_X_Pos[5];
        Ball_Y_Pos_in[5]  = Ball_Y_Pos[5];
        Ball_X_Pos_in[6]  = Ball_X_Pos[6];
        Ball_Y_Pos_in[6]  = Ball_Y_Pos[6];
        Ball_X_Pos_in[7]  = Ball_X_Pos[7];
        Ball_Y_Pos_in[7]  = Ball_Y_Pos[7];
        Ball_X_Pos_in[8]  = Ball_X_Pos[8];
        Ball_Y_Pos_in[8]  = Ball_Y_Pos[8];
        Ball_X_Pos_in[9]  = Ball_X_Pos[9];
        Ball_Y_Pos_in[9]  = Ball_Y_Pos[9];
        Ball_X_Pos_in[10] = Ball_X_Pos[10];
        Ball_Y_Pos_in[10] = Ball_Y_Pos[10];
        Ball_X_Pos_in[11] = Ball_X_Pos[11];
        Ball_Y_Pos_in[11] = Ball_Y_Pos[11];
        Ball_X_Pos_in[12] = Ball_X_Pos[12];
        Ball_Y_Pos_in[12] = Ball_Y_Pos[12];
        Ball_X_Pos_in[13] = Ball_X_Pos[13];
        Ball_Y_Pos_in[13] = Ball_Y_Pos[13];
        Ball_X_Pos_in[14] = Ball_X_Pos[14];
        Ball_Y_Pos_in[14] = Ball_Y_Pos[14];
        Ball_X_Pos_in[15] = Ball_X_Pos[15];
        Ball_Y_Pos_in[15] = Ball_Y_Pos[15];
		  is_collision = 0;
        end
        
		  
		  for(int i = 0 ; i < 16 ; i ++)
		  begin
        if ( ( DistX[i]*DistX[i] + DistY[i]*DistY[i]) <= (Size * Size) ) 
            is_rball[i] = 1'b1;
        else
            is_rball[i] = 1'b0;
        end

        
   end
    
endmodule